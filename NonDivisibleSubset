import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Solution {

           static int subsetPairNotDivisibleByK(int arr[],  
                                      int N, int K) 
    { 
          
        // Array for storing frequency of modulo 
        // values 
        int f[] = new int[K]; 
        Arrays.fill(f, 0); 
      
        // Fill frequency array with values modulo K 
        for (int i = 0; i < N; i++) 
            f[arr[i] % K]++; 
      
        // if K is even, then update f[K/2] 
        if (K % 2 == 0) 
            f[K/2] = Math.min(f[K/2], 1); 
      
        // Initialize result by minimum of 1 or 
        // count of numbers giving remainder 0 
        int res = Math.min(f[0], 1); 
      
        // Choose maximum of count of numbers 
        // giving remainder i or K-i 
        for (int i = 1; i <= K/2; i++) 
            res += Math.max(f[i], f[K-i]); 
      
        return res; 
    } 
      
    // Driver method 
    public static void main(String[] args) 
    { 
        Scanner in=new Scanner(System.in);
          int N = in.nextInt();
        int arr[] = new int[N] ; 
        int K = in.nextInt(); 
        for(int i=0; i<N; i++)
            arr[i]=in.nextInt();
          
        System.out.print(subsetPairNotDivisibleByK( 
                                         arr, N, K)); 
    } 


}
